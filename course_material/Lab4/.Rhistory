knitr::opts_chunk$set(fig.align = 'center', warning=FALSE, message=FALSE, fig.asp=0.625, dev='png', global.par = TRUE, dev.args=list(pointsize=10), fig.path = 'figs/')
library(MASS)
library(knitr)
local({
hook_plot = knit_hooks$get('plot')
knit_hooks$set(plot = function(x, options) {
paste0('\n\n----\n\n', hook_plot(x, options))
})
})
library(DAAG)
library(kableExtra)
n <- nrow(nihills)
kable(nihills, "html") %>%
kable_styling(bootstrap_options = "striped", full_width = F)
plot(nihills$dist, nihills$time, pch = 19)
nihills.lm.one <- lm(time ~ dist, data = nihills)
summary(nihills.lm.one)
##plot of the residuals
par(mfrow=c(2,2))
plot(nihills.lm.one)
par(mfrow=c(1,1))
plot(nihills$dist, nihills$time, pch = 19, ylim = c(0,4))
curve(predict(nihills.lm.one,data.frame(dist=x)),add=TRUE,col="red")
text(13,3, expression(time == hat(beta)[0]+hat(beta)[1]*dist), col="red")
## add y.hat values to the plot
points(nihills$dist, fitted(nihills.lm.one), pch = 19, col = "red", cex = 0.8)
nihills[17,]
segments(nihills[17,"dist"], nihills[17,"time"],
nihills[17,"dist"], fitted(nihills.lm.one)[17], lty = 2)
regr_ss <- sum((as.vector(nihills.lm.one$fitted.values) - mean(nihills$time))^2)
regr_ss
# or
regr_ss <- sum((fitted(nihills.lm.one) - mean(nihills$time))^2)
regr_ss
tot_ss <- sum((nihills$time-mean(nihills$time))^2)
R_sq <- regr_ss/tot_ss
R_sq
library(PerformanceAnalytics)
chart.Correlation(nihills[, c("dist", "climb", "time")])
nihills.lm <- lm(time ~  dist + climb, data = nihills)
summary(nihills.lm)
par(mfrow = c(2,2))
plot(nihills.lm)
coef <- summary(nihills.lm)$coef
coef
# or
coef(nihills.lm)
plot(nihills$dist,resid(nihills.lm.one))
abline(h=0, lty=2, col="darkgrey")
nihills.lm.two <- lm(time ~ dist+I(dist^2), data = nihills)
summary(nihills.lm.two)
par(mfrow=c(2,2))
plot(nihills.lm.two)
par(mfrow=c(1,1))
plot(nihills$dist, nihills$time)
curve(predict(nihills.lm.two,data.frame(dist=x)),add=TRUE,col="red")
text(13,3, expression(time == hat(beta)[0]+hat(beta)[1]*dist+hat(beta)[2]*dist^2), col="red")
summary(nihills)
par(mfrow=c(1,2))
hist(nihills$time, prob = TRUE, breaks = 15)
hist(nihills$dist, prob = TRUE, breaks = 15)
nihills$logdist <- log(nihills$dist)
nihills$logclimb <- log(nihills$climb)
nihills$logtime <- log(nihills$time)
chart.Correlation(nihills[, c("logdist", "logtime", "logclimb")])
nihills.log.lm <- lm(logtime~logdist+logclimb, data =nihills)
summary(nihills.log.lm)
par(mfrow=c(2,2))
plot(nihills.log.lm)
#AIC
AIC <- rbind(extractAIC(nihills.lm.one)[2],
extractAIC(nihills.lm.two)[2],
extractAIC(nihills.lm)[2],
extractAIC(nihills.log.lm)[2])
#BIC
BIC <- rbind(extractAIC(nihills.lm.one, k = log(n))[2],
extractAIC(nihills.lm.two, k = log(n))[2],
extractAIC(nihills.lm, k = log(n))[2],
extractAIC(nihills.log.lm, k = log(n))[2])
model <- c("nihills.lm.one", "nihills.lm.two","nihills.lm", "nihills.log.lm")
cbind.data.frame(model,AIC,BIC)
#log model
coverage_log <- exp(predict(nihills.log.lm, interval ="confidence"))
exp(predict(nihills.log.lm, interval ="confidence"))[1:5,]
freq_coverage_log <- mean( nihills$time>=coverage_log[,2] & nihills$time <=coverage_log[,3])
freq_coverage_log
summary(nihills.lm.one)
anova(nihills.lm.one)
anova(nihills.log.lm)
vif(nihills.log.lm)
nihills$logLC <- 4 + 3*log(nihills$dist)-2*nihills$climb
nihills.log.lm.sum <- lm(logtime ~ logdist + logclimb + logLC,
data=nihills)
summary(nihills.log.lm.sum)
vif(nihills.log.lm.sum)
nihills$logsum <- log(nihills$dist)+log(nihills$climb)
nihills$logdiff <- log(nihills$dist)-log(nihills$climb)
nihills.log.lm.ind <- lm(logtime  ~ logsum + logdiff, data=nihills)
vif(nihills.log.lm.ind)
library(MASS)
#lambda =0
nihills.ridge <- lm.ridge( logtime~logdist+logclimb,
data=nihills, lambda =0 )
nihills.ridge
#select lambda in terms of GCV error
select(lm.ridge(logtime~logdist+logclimb+logLC, data=nihills,
lambda = seq(0,10,0.001)))
nihills.ridge.sel <- lm.ridge( logtime~logdist+logclimb+logLC,
data=nihills, lambda = 0.371)
nihills.ridge.sel
coef(nihills.log.lm.sum)
library(lasso2)
install.packages("lasso2")
install.packages("lassopack")
install.packages("lassopack")
old_packages <- installed.packages(lib.loc = "/home/henriquegomide/R/x86_64-pc-linux-gnu-library/3.6/
")
head(old_packages[, 1])
new_packages <- installed.packages()
missing_packages <- as.data.frame(old_packages[
!old_packages[, "Package"] %in% new_packages[, "Package"],
])
install.packages(missing_packages$Package)
updateR
